import { computed, Directive, inject, input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconSetService } from '../icon-set';
import { transformName } from './icon.utils';
import * as i0 from "@angular/core";
export class IconDirective {
    constructor() {
        this.#sanitizer = inject(DomSanitizer);
        this.#iconSet = inject(IconSetService);
        this.content = input(undefined, { alias: 'cIcon' });
        this.customClasses = input();
        this.size = input('');
        this.title = input();
        this.height = input();
        this.width = input();
        this.name = input('', { transform: transformName });
        this.viewBoxInput = input(undefined, { alias: 'viewBox' });
        this.xmlns = input('http://www.w3.org/2000/svg');
        this.pointerEvents = input('none', { alias: 'pointer-events' });
        this.role = input('img');
        this.hostClasses = computed(() => {
            const computedSize = this.computedSize();
            const classes = {
                icon: true,
                [`icon-${computedSize}`]: !!computedSize
            };
            return this.customClasses() ?? classes;
        });
        this.viewBox = computed(() => {
            return this.viewBoxInput() ?? this.scale();
        });
        this.innerHtml = computed(() => {
            const codeVal = this.code();
            const code = Array.isArray(codeVal) ? (codeVal?.[1] ?? codeVal?.[0] ?? '') : codeVal || '';
            // todo proper sanitize
            // const sanitized = this.sanitizer.sanitize(SecurityContext.HTML, code);
            return this.#sanitizer.bypassSecurityTrustHtml(this.#titleCode() + code || '');
        });
        this.#titleCode = computed(() => {
            return this.title() ? `<title>${this.title()}</title>` : '';
        });
        this.code = computed(() => {
            const content = this.content();
            if (content) {
                return content;
            }
            const name = this.name();
            if (this.#iconSet && name) {
                return this.#iconSet.getIcon(name);
            }
            if (name && !this.#iconSet?.icons[name]) {
                console.warn(`cIcon directive: The '${name}' icon not found. Add it to the IconSet service for use with the 'name' property. \n`, name);
            }
            return '';
        });
        this.scale = computed(() => {
            return Array.isArray(this.code()) && (this.code()?.length ?? 0) > 1 ? `0 0 ${this.code()?.[0]}` : '0 0 64 64';
        });
        this.computedSize = computed(() => {
            const addCustom = !this.size() && (this.width() || this.height());
            return this.size() === 'custom' || addCustom ? 'custom-size' : this.size();
        });
    }
    #sanitizer;
    #iconSet;
    #titleCode;
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: IconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "18.2.12", type: IconDirective, isStandalone: true, selector: "svg[cIcon]", inputs: { content: { classPropertyName: "content", publicName: "cIcon", isSignal: true, isRequired: false, transformFunction: null }, customClasses: { classPropertyName: "customClasses", publicName: "customClasses", isSignal: true, isRequired: false, transformFunction: null }, size: { classPropertyName: "size", publicName: "size", isSignal: true, isRequired: false, transformFunction: null }, title: { classPropertyName: "title", publicName: "title", isSignal: true, isRequired: false, transformFunction: null }, height: { classPropertyName: "height", publicName: "height", isSignal: true, isRequired: false, transformFunction: null }, width: { classPropertyName: "width", publicName: "width", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, viewBoxInput: { classPropertyName: "viewBoxInput", publicName: "viewBox", isSignal: true, isRequired: false, transformFunction: null }, xmlns: { classPropertyName: "xmlns", publicName: "xmlns", isSignal: true, isRequired: false, transformFunction: null }, pointerEvents: { classPropertyName: "pointerEvents", publicName: "pointer-events", isSignal: true, isRequired: false, transformFunction: null }, role: { classPropertyName: "role", publicName: "role", isSignal: true, isRequired: false, transformFunction: null } }, host: { attributes: { "ngSkipHydration": "true" }, properties: { "innerHtml": "innerHtml()", "class": "hostClasses()", "attr.viewBox": "viewBox()", "attr.xmlns": "xmlns()", "attr.pointer-events": "pointerEvents()", "attr.role": "role()", "attr.aria-hidden": "true" } }, exportAs: ["cIcon"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.12", ngImport: i0, type: IconDirective, decorators: [{
            type: Directive,
            args: [{
                    exportAs: 'cIcon',
                    selector: 'svg[cIcon]',
                    standalone: true,
                    host: {
                        ngSkipHydration: 'true',
                        '[innerHtml]': 'innerHtml()',
                        '[class]': 'hostClasses()',
                        '[attr.viewBox]': 'viewBox()',
                        '[attr.xmlns]': 'xmlns()',
                        '[attr.pointer-events]': 'pointerEvents()',
                        '[attr.role]': 'role()',
                        '[attr.aria-hidden]': 'true'
                    }
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,